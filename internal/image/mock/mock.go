// Code generated by MockGen. DO NOT EDIT.
// Source: image.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/image-api/internal/domain"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockImageUseCase is a mock of ImageUseCase interface.
type MockImageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockImageUseCaseMockRecorder
}

// MockImageUseCaseMockRecorder is the mock recorder for MockImageUseCase.
type MockImageUseCaseMockRecorder struct {
	mock *MockImageUseCase
}

// NewMockImageUseCase creates a new mock instance.
func NewMockImageUseCase(ctrl *gomock.Controller) *MockImageUseCase {
	mock := &MockImageUseCase{ctrl: ctrl}
	mock.recorder = &MockImageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageUseCase) EXPECT() *MockImageUseCaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockImageUseCase) Add(ctx context.Context, i domain.Image) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, i)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockImageUseCaseMockRecorder) Add(ctx, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockImageUseCase)(nil).Add), ctx, i)
}

// Get mocks base method.
func (m *MockImageUseCase) Get(ctx context.Context, id string) (domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImageUseCaseMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageUseCase)(nil).Get), ctx, id)
}

// GetMetadata mocks base method.
func (m *MockImageUseCase) GetMetadata(ctx context.Context, id string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockImageUseCaseMockRecorder) GetMetadata(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockImageUseCase)(nil).GetMetadata), ctx, id)
}

// ListAllMetadata mocks base method.
func (m *MockImageUseCase) ListAllMetadata(ctx context.Context) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllMetadata", ctx)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllMetadata indicates an expected call of ListAllMetadata.
func (mr *MockImageUseCaseMockRecorder) ListAllMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllMetadata", reflect.TypeOf((*MockImageUseCase)(nil).ListAllMetadata), ctx)
}

// Update mocks base method.
func (m *MockImageUseCase) Update(ctx context.Context, id string, i domain.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockImageUseCaseMockRecorder) Update(ctx, id, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImageUseCase)(nil).Update), ctx, id, i)
}

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockImageRepository) Add(ctx context.Context, fileId, fileName string, i domain.Image, metadata map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, fileId, fileName, i, metadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockImageRepositoryMockRecorder) Add(ctx, fileId, fileName, i, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockImageRepository)(nil).Add), ctx, fileId, fileName, i, metadata)
}

// Delete mocks base method.
func (m *MockImageRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockImageRepository) Get(ctx context.Context, id string) (domain.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImageRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageRepository)(nil).Get), ctx, id)
}

// GetMetadata mocks base method.
func (m *MockImageRepository) GetMetadata(ctx context.Context, id string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockImageRepositoryMockRecorder) GetMetadata(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockImageRepository)(nil).GetMetadata), ctx, id)
}

// ListAllMetadata mocks base method.
func (m *MockImageRepository) ListAllMetadata(ctx context.Context) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllMetadata", ctx)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllMetadata indicates an expected call of ListAllMetadata.
func (mr *MockImageRepositoryMockRecorder) ListAllMetadata(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllMetadata", reflect.TypeOf((*MockImageRepository)(nil).ListAllMetadata), ctx)
}

// MockImageHandlers is a mock of ImageHandlers interface.
type MockImageHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockImageHandlersMockRecorder
}

// MockImageHandlersMockRecorder is the mock recorder for MockImageHandlers.
type MockImageHandlersMockRecorder struct {
	mock *MockImageHandlers
}

// NewMockImageHandlers creates a new mock instance.
func NewMockImageHandlers(ctrl *gomock.Controller) *MockImageHandlers {
	mock := &MockImageHandlers{ctrl: ctrl}
	mock.recorder = &MockImageHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageHandlers) EXPECT() *MockImageHandlersMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockImageHandlers) Add() echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add")
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockImageHandlersMockRecorder) Add() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockImageHandlers)(nil).Add))
}

// Get mocks base method.
func (m *MockImageHandlers) Get() echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockImageHandlersMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageHandlers)(nil).Get))
}

// GetMetadata mocks base method.
func (m *MockImageHandlers) GetMetadata() echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockImageHandlersMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockImageHandlers)(nil).GetMetadata))
}

// ListMetadata mocks base method.
func (m *MockImageHandlers) ListMetadata() echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetadata")
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// ListMetadata indicates an expected call of ListMetadata.
func (mr *MockImageHandlersMockRecorder) ListMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetadata", reflect.TypeOf((*MockImageHandlers)(nil).ListMetadata))
}

// Update mocks base method.
func (m *MockImageHandlers) Update() echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockImageHandlersMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockImageHandlers)(nil).Update))
}
